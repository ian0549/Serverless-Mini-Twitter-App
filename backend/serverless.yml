service:
  name: mini-twitter-app




plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  
  environment:
    TWEET_TABLE: TweetsTable-Prime-${self:provider.stage}
    TWEET_ID_INDEX: TweetIdIndex
    IMAGES_S3_BUCKET: serverless-tweet-images-4tf129ytre0764-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


custom:
  documentation:
    api:
      info:
        version: 'v1.0.0'
        title: Mini Twitter API
        description: A Mini Twitter Serverless application       
    models:
      - name: CreateTweetRequest
        contentType: "application/json"   
        schema: ${file(./../backend/src/models/create-tweet-request.json)}
    







functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler


  AddTweetComment: 
    handler: src/lambda/https/addTweetComment.handler
    events:
      - http:
          method: post
          path: tweets/{tweetId}
          authorizer: Auth
          cors: true
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      

  Retweet:
    handler: src/lambda/https/reTweet.handler
    events:
      - http:
          path: tweets
          method: post
          authorizer: Auth
          cors: true
      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      
       

       
  CreateUserTweet:
    handler: src/lambda/https/createUserTweet.handler 
    events:
      - http:
          path: tweets
          method: post
          authorizer: Auth
          cors: true
          reqValidatorName: 'xMyRequestValidator'
          documentation:
            summary: Create a new  tweet
            description: create tweets
            requestModels:
              'application/json': CreateTweetRequest

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      
       
  DeleteUserTweet:
    handler: src/lambda/https/deleteUserTweet.handler 
    events:
      - http:
          path: tweets/{tweetId}
          method: post
          authorizer: Auth
          cors: true
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      
                       
  GenerateUserUploadUrl:
    handler: src/lambda/https/generateUserUploadUrl.handler  
    events:
      - http:
          path: tweets/attachment
          method: post
          authorizer: Auth
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      



  GetUserTweet:
    handler: src/lambda/https/getUserTweet.handler 
    events:
      - http:
          path: tweets
          method: get
          authorizer: Auth
          cors: true
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*     
  
  UpdateUserTweet:
    handler: src/lambda/https/updateUserTweet.handler
    events:
      - http:
          path: tweets/{tweetId}
          method: post
          authorizer: Auth
          cors: true
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}      






resources:
  Resources:

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT 
                - POST
                - DELETE 
                - HEAD 
              MaxAge: 3000    
    

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 


    GateWayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties: 
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'  


    xMyRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TweetsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: tweetId
            AttributeType: S 
          - AttributeName: userId
            AttributeType: S                      
        KeySchema: 
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE  
        TableName: ${self:provider.environment.TWEET_TABLE}                    
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TWEET_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST 